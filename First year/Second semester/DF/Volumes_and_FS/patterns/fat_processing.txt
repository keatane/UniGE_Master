struct dir_entry {
    u64 filename;
    u8 extension[3];
    u8 attr;
    u8 res;
    padding[1];
    u16 create_time;
    u16 create_date;
    u16 last_access_date;
    padding[2];
    u16 modified_time;
    u16 modified_date;
    u16 start_cluster;
    u32 file_size;
    };

struct boot_sector {
    u8 jump_instruction[3];
    u64 oem_id;
    u16 bytes_sect;
    u8 sect_cluster;
    u16 reserved_sectors;
    u8 n_fats;
    u16 root_entries;
    u16 small_sect;
    u8 media_desc;
    u16 sect_fat;
    u16 sect_track;
    u16 numb_heads;
    u32 hidden_sectors;
    u32 large_sectors;
    u8 physical_dr_n;
    u8 reserved;
    u8 ext_boot_sig;
    u32 volume_serial_number;
    padding[5];
    u48 volume_label;
    u64 file_sys_type;
    u8 boot_code[0x1fe-0x3e];
    u16 sig_ending;
};

boot_sector vbr @ 0;

u32 fat1 = vbr.reserved_sectors; // that is the index from which fat area starts
u32 fat2 = fat1 + vbr.sect_fat;

u16 fat_entries[200] @ fat1 * vbr.bytes_sect;
u16 fat2_entries[200] @ fat2 * vbr.bytes_sect;

dir_entry root_dir[vbr.root_entries] @ (vbr.reserved_sectors + vbr.n_fats * vbr.sect_fat) * vbr.bytes_sect;